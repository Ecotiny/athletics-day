POST /api/event
Create new event.
Input:
name: name of new event
Output:
success: true/false whether or not it was successful
event_id: id of the event just created
error: only created if success: false

GET /api/event
Get all events.
No input
Output:
success: true/false whether or not it was successful
rows: every row of the events table []
error: only created if success: false

GET /api/event/:event_id
Get name of specific event
Input:
url parameters (e.g. /event/1 would address the event with ID 1
Output:
success: true/false whether or not it was successful
event_name: name of event with specific ID
error: only created if success: false

DELETE /api/event/:event_id
Delete specific event
Input:
url parameters (e.g. /event/1 would address the event with ID 1
Output:
success: true/false whether or not it was successful
error: only created if success: false

POST /api/house
Create new house.
Input:
name: name of new house
Output:
success: true/false whether or not it was successful
house_id: id of the house just created
error: only created if success: false

GET /api/house
Get all houses.
No input
Output:
success: true/false whether or not it was successful
rows: every row of the houses table []
error: only created if success: false

GET /api/house/:house_id
Get name of specific house
Input:
url parameters (e.g. /house/1 would address the house with ID 1
Output:
success: true/false whether or not it was successful
house_name: name of house with specific ID
error: only created if success: false

DELETE /api/house/:house_id
Delete specific house
Input:
url parameters (e.g. /house/1 would address the house with ID 1
Output:
success: true/false whether or not it was successful
error: only created if success: false

POST /api/student
Create a student
Input:
name: name of student
student_id: student ID
Output:
success: true/false whether or not it was successful
error: only created if success: false

GET /api/student
Get all students
No input
Output:
success: true/false whether or not it was successful
rows: every row of the students table []
error: only created if success: false

GET /api/student/:student_id
Get name and house of specific student
Input:
url parameters (e.g. /student/1)
Output:
success
error (if not successful)
student_name (if successful)
house_id (if successful)

DELTE /api/student/:student_id
Delete specific student
Input:
url parameters (e.g. /student/1)
Output:
success
error (if not successful)

POST /api/participation
Create new participation entry
Input:
event_id
house_id
total_students (from this house)
Output:
success
error (if not successful)

PUT /api/participation
Update participation entry
Will return error if there is not an existing entry with the same house and event id
Input:
event_id
house_id
total_students (new, from this house)
Output:
success
error (if not successful)

GET /api/participation/:event_id
Get all participation from one event
Input:
url parameters (e.g. /participation/1 will get participation from event_id 1)
Output:
success
error (if not successful)
rows (if successful)

DELETE /api/participation/:event_id
Delete all the participation stuff from an event
Input:
url parameters (e.g. /participation/1)
Output:
success
error (if not successful)

DELETE /api/participation/:event_id/:house_id
Delete participation entry for specific house and event
Input:
url parameters (e.g. /participation/1/2 will delete entry for event 1, house 2)
Output:
success
error (if not successful)

GET /points/:house_id
Get all relevant rows for point calculation from a specific house
Input:
url parameters (e.g. /points/1 will get points from house 1)
Output:
success
error (if not successful)
placings (if successful): rows (event_id, student_id, placing, value) from placings table
participation (if successful): rows (event_id, num_students) from participation table